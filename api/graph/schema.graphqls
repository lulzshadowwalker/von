type Query {
  notifications: [Notification]!
  drivers: [Driver]!
  busses: [Bus]!
}

type Mutation {
  sendNotification(input: SendNotificationInput): Notification
}

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @internal on FIELD_DEFINITION

directive @goTag(
	key: String!
	value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

  """
  TODO: localizization
        fuck localization 
  """

type Notification {
  id: ID!
  title: String!
  body: String!
  sent_at: String! 
  sender: User! @goField(forceResolver: true) @goTag(key: "json", value: "-")
  sender_id: String! 
  target_audience: [NotificationTargetAudience!]!
  delivery_method: [NotificationDeliveryMethod!]!
}

enum NotificationDeliveryMethod {
  email
  mobile_push
}

enum NotificationTargetAudience {
  passengers
  drivers
}

input SendNotificationInput {
  title: String!
  body: String!
  target_audience: [NotificationTargetAudience!]!
  delivery_method: [NotificationDeliveryMethod!]!
}

type User {
  id: ID!
  name: String! 
  email: String! 
  avatar: String
}

type Driver {
  id: ID!
  """
  TODO: extend driver from user 
  """
  user: User! @goTag(key: "json", value: "-") @goField(forceResolver: true)
  bus: Bus @goTag(key: "json", value: "-") @goField(forceResolver: true)
  license_number: String!
}

type Bus {
  id: ID!
  driver: Driver @goTag(key: "json", value: "-") @goField(forceResolver: true)
  plate_number: String!
  model: String!
}
