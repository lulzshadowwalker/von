// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// TODO: localizization
//
//	fuck localization
type Notification struct {
	ID             string                       `json:"id"`
	Title          string                       `json:"title"`
	Body           string                       `json:"body"`
	SentBy         *User                        `json:"sent_by"`
	SentAt         string                       `json:"sent_at"`
	TargetAudience []NotificationTargetAudience `json:"target_audience"`
	DeliveryMethod []NotificationDeliveryMethod `json:"delivery_method"`
}

type SendNotificationInput struct {
	Title          string                       `json:"title"`
	Body           string                       `json:"body"`
	TargetAudience []NotificationTargetAudience `json:"target_audience"`
	DeliveryMethod []NotificationDeliveryMethod `json:"delivery_method"`
}

type User struct {
	ID string `json:"id"`
}

type NotificationDeliveryMethod string

const (
	NotificationDeliveryMethodEmail      NotificationDeliveryMethod = "EMAIL"
	NotificationDeliveryMethodMobilePush NotificationDeliveryMethod = "MOBILE_PUSH"
)

var AllNotificationDeliveryMethod = []NotificationDeliveryMethod{
	NotificationDeliveryMethodEmail,
	NotificationDeliveryMethodMobilePush,
}

func (e NotificationDeliveryMethod) IsValid() bool {
	switch e {
	case NotificationDeliveryMethodEmail, NotificationDeliveryMethodMobilePush:
		return true
	}
	return false
}

func (e NotificationDeliveryMethod) String() string {
	return string(e)
}

func (e *NotificationDeliveryMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationDeliveryMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationDeliveryMethod", str)
	}
	return nil
}

func (e NotificationDeliveryMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationTargetAudience string

const (
	NotificationTargetAudiencePassengers NotificationTargetAudience = "PASSENGERS"
	NotificationTargetAudienceDrivers    NotificationTargetAudience = "DRIVERS"
)

var AllNotificationTargetAudience = []NotificationTargetAudience{
	NotificationTargetAudiencePassengers,
	NotificationTargetAudienceDrivers,
}

func (e NotificationTargetAudience) IsValid() bool {
	switch e {
	case NotificationTargetAudiencePassengers, NotificationTargetAudienceDrivers:
		return true
	}
	return false
}

func (e NotificationTargetAudience) String() string {
	return string(e)
}

func (e *NotificationTargetAudience) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationTargetAudience(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationTargetAudience", str)
	}
	return nil
}

func (e NotificationTargetAudience) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
